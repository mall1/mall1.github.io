<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GitOps——在Windows/Linux下使用Minikube安装ArgoCD</title>
    <link href="/2021/04/23/gitops-argocd/"/>
    <url>/2021/04/23/gitops-argocd/</url>
    
    <content type="html"><![CDATA[<h1 id="安装ArgoCD"><a href="#安装ArgoCD" class="headerlink" title="安装ArgoCD"></a>安装ArgoCD</h1><h2 id="前置步骤"><a href="#前置步骤" class="headerlink" title="前置步骤"></a>前置步骤</h2><p>在你开始之前，你需要：</p><ul><li>安装<a href="https://minikube.sigs.k8s.io/docs/start/">Minikube</a></li><li>安装<a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">kubectl</a></li><li>安装<a href="https://docs.docker.com/desktop/#download-and-install">Docker</a> </li></ul><h2 id="创建-Kubernetes-集群"><a href="#创建-Kubernetes-集群" class="headerlink" title="创建 Kubernetes 集群"></a>创建 Kubernetes 集群</h2><p>使用 Minikube创建两个 Kubernetes 集群</p><ul><li><p>argocd-k8s用于安装 ArgoCD</p>  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">minikube</span> start -p argocd-k<span class="hljs-number">8</span>s<br></code></pre></td></tr></table></figure></li><li><p>target-k8s 用于推送应用程序与运行。</p>  <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">minikube <span class="hljs-built_in">start</span> <span class="hljs-literal">-p</span> tar<span class="hljs-built_in">get-k8s</span><br></code></pre></td></tr></table></figure></li><li><p>我们将在argo-k8s 集群完成 argo cd 的安装。根据前面创建集群的顺序， kubectl context应该已经指向argo-k8s 集群，但为保证万无一失，可以使用如下命令切换到argo-k8s 集群。</p>  <figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">kubectl <span class="hljs-keyword">config</span> <span class="hljs-keyword">use</span>-<span class="hljs-keyword">context</span> argocd-k8s<br></code></pre></td></tr></table></figure></li></ul><h2 id="安装-ArgoCD"><a href="#安装-ArgoCD" class="headerlink" title="安装 ArgoCD"></a>安装 ArgoCD</h2><ul><li><p>创建一个名称空间，我们将在其中安装 ArgoCD。</p>  <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">kubectl create <span class="hljs-keyword">namespace</span> <span class="hljs-symbol">argocd</span><br></code></pre></td></tr></table></figure></li></ul><ul><li><p>使用 ArgoCD 官方的脚本安装。</p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">kubectl apply -n argocd -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/argoproj/</span>argo-cd<span class="hljs-regexp">/stable/m</span>anifests/install.yaml<br></code></pre></td></tr></table></figure><p>  如果提示<code>The requested name is valid, but no data of the requested type was found.</code>可以先手动下载链接中的文件并指定。</p></li><li><p>这个命令很快就能执行完毕，但pods仍然会在后台spinning up。需要等待这些pods的状态变成RUNNING。可以使用如下命令查看。</p>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-builtin-name">get</span> pods -n argocd<br></code></pre></td></tr></table></figure><p>  执行结果为</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">$ kubectl <span class="hljs-keyword">get</span> pods <span class="hljs-operator">-</span>n argocd<br>NAME                                  READY   STATUS    RESTARTS   AGE<br>argocd<span class="hljs-operator">-</span>application<span class="hljs-operator">-</span>controller<span class="hljs-number">-0</span>       <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">3</span>m23s<br>argocd<span class="hljs-operator">-</span>dex<span class="hljs-operator">-</span>server<span class="hljs-number">-5</span>dd657bd9<span class="hljs-operator">-</span>pvbg7     <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">3</span>m24s<br>argocd<span class="hljs-operator">-</span>redis<span class="hljs-number">-759</span>b6bc7f4<span class="hljs-operator">-</span>mwsbg         <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">3</span>m24s<br>argocd<span class="hljs-operator">-</span>repo<span class="hljs-operator">-</span>server<span class="hljs-number">-6</span>c495f858f<span class="hljs-operator">-</span>xx4qc   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">3</span>m23s<br>argocd<span class="hljs-operator">-</span>server<span class="hljs-number">-859</span>b4b5578<span class="hljs-operator">-</span>glfvp        <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">3</span>m23s<br></code></pre></td></tr></table></figure></li><li><p>使用 port-forward 将端口公开给服务，并将其转发给本地主机。</p>  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kubectl</span> port-forward svc/argocd-server -n argocd <span class="hljs-number">8080</span>:<span class="hljs-number">443</span><br></code></pre></td></tr></table></figure><p>  之后 ArgoCD 集群可以在 <a href="https://localhost:8080/">https://localhost:8080</a> 访问。因为没有部署任何证书，所以浏览器会显示证书异常。Port-forward 会在终端的前台运行。打开另一个终端窗口或标签然后回到工作目录。</p></li></ul><ul><li><p>ArgoCD默认使用用户名admin登录，密码如下（参考<a href="https://argoproj.github.io/argo-cd/getting_started/">ArgoCD官方文档</a>）</p><ul><li><p>1.8以及以前的ArgoCD版本使用其服务器 pod 的唯一名称作为默认密码可以使用下面的命令格式化输出。输出结果是 argocd-server-&lt; number &gt;-&lt; number &gt; 。</p>  <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">kubectl <span class="hljs-keyword">get</span> pods -n argocd -l app.kubernetes.io/<span class="hljs-type">name</span>=argocd-<span class="hljs-keyword">server</span> -o <span class="hljs-type">name</span> | cut -d<span class="hljs-string">&#x27;/&#x27;</span> -f <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li><li><p>1.9及以后的ArgoCD版本管理帐户的初始密码是自动生成的，并以明文形式存储在 Argo CD 安装名称空间中名为 Argo-initial-admin-secret 的机密密码字段密码中。可以使用 kubectl 获取这个密码:</p>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl -n argocd <span class="hljs-builtin-name">get</span><span class="hljs-built_in"> secret </span>argocd-initial-admin-secret -o <span class="hljs-attribute">jsonpath</span>=<span class="hljs-string">&quot;&#123;.data.password&#125;&quot;</span> | base64 -d<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="安装并设置ArgoCD-CLI"><a href="#安装并设置ArgoCD-CLI" class="headerlink" title="安装并设置ArgoCD CLI"></a>安装并设置ArgoCD CLI</h2><ul><li><p>安装ArgoCD CLI</p><ul><li><p>使用 brew 安装:</p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">brew tap argoproj<span class="hljs-regexp">/tap &amp;&amp; brew install argoproj/</span>tap/argocd<br></code></pre></td></tr></table></figure></li><li><p>可执行文件安装</p><ul><li><p>确认正在运行的 ArgoCD 版本。登录到 ArgoCD 用户界面。在左上角，ArgoCD 的图标下面，可以看到主版本。将鼠标悬停在其上面会显示完整版本的字符串。</p>  <img src="/2021/04/23/gitops-argocd/argocd_version.png" class="" title="argocd_version"></li><li><p>在ArgoCD GitHub 站点的release页面，找到与你的 ArgoCD 版本一致的版本下载。</p></li><li><p>下载后，重命名该文件为argocd并将其移动到 $PATH 中。</p></li></ul></li></ul></li><li><p>安装了 ArgoCD客户端之后，可以使用上一节中的密码登录到 ArgoCD。此处需要接受服务器证书错误。</p>  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">argocd</span> login localhost:<span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><p>  执行后</p>  <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">$ argocd login localhost:8080<br><span class="hljs-symbol">WARNING: </span>server certificate had error: x509: certificate signed by unknown authority. Proceed insecurely (y/n)? y<br>Username: admin<br>Password:<br><span class="hljs-emphasis">&#x27;admin:login&#x27;</span> logged in successfully<br>Context <span class="hljs-emphasis">&#x27;localhost:8080&#x27;</span> updated<br></code></pre></td></tr></table></figure></li><li><p>在这个阶段可以选择更改密码。</p>  <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">argocd account <span class="hljs-keyword">update</span>-<span class="hljs-keyword">password</span><br></code></pre></td></tr></table></figure></li><li><p>在部署应用程序之前需要告诉 ArgoCD 部署目标。默认情况下，如果不添加额外的 Kubernetes 集群目标，则 ArgoCD 将把应用程序部署到安装它的集群。要将目标 Kubernetes 集群添加到 ArgoCD，请使用以下命令:</p>  <figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">argocd cluster <span class="hljs-keyword">add</span> <span class="hljs-keyword">target</span>-k<span class="hljs-number">8</span>s<br></code></pre></td></tr></table></figure><p>  这将在集群中添加一个 ArgoCD 服务帐户，并允许 ArgoCD 将应用程序部署到集群中。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Note</tag>
      
      <tag>GitOps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nvidia GTC</title>
    <link href="/2021/04/15/ItsComming/"/>
    <url>/2021/04/15/ItsComming/</url>
    
    <content type="html"><![CDATA[<p>开个坑</p>]]></content>
    
    
    
    <tags>
      
      <tag>Thoughts</tag>
      
      <tag>News</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
